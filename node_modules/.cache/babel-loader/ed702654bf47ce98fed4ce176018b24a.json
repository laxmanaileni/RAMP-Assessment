{"ast":null,"code":"var _jsxFileName = \"/Users/laxmanreddyaileni/Downloads/RAMP Assignment/Ramp Done/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [disable, setDisable] = useState(false);\n  const [buttonVisibility, setButtonVisibility] = useState(true);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const paginateTransactions = useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll();\n  }, [paginatedTransactionsUtils]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    paginateTransactions();\n  }, [employeeUtils, transactionsByEmployeeUtils, paginateTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    paginatedTransactionsUtils.invalidateData();\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          } // Bug 6 Part 1 is fixed Here by using useState React Hook\n\n\n          if (newValue !== EMPTY_EMPLOYEE) {\n            setButtonVisibility(false);\n          } else if (newValue === EMPTY_EMPLOYEE) {\n            setButtonVisibility(false);\n          }\n\n          if (newValue.id === '') {\n            return EMPTY_EMPLOYEE;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), transactions !== null &&\n        /*#__PURE__*/\n        //Bug 5 is Fixed here Just call paginateTransactions\n        // Bug 6 Part 2 is Fixed here using [disable,setDisable ==> useState(This is a react hook)] if the list was ended\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || disable,\n          onClick: async () => {\n            try {\n              await paginateTransactions();\n            } catch (error) {\n              console.log(error);\n              setDisable(true);\n            }\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RdQVOuIUzc8KWLmyoqfnZfUwTxQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","disable","setDisable","buttonVisibility","setButtonVisibility","transactions","paginateTransactions","fetchAll","loadAllTransactions","invalidateData","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","error","console","log"],"sources":["/Users/laxmanreddyaileni/Downloads/RAMP Assignment/Ramp Done/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [disable,setDisable]=useState(false);\n  const [buttonVisibility,setButtonVisibility]=useState(true);\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const paginateTransactions=useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll()\n  }, [paginatedTransactionsUtils])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    \n    setIsLoading(false)\n\n    paginateTransactions()\n  }, [employeeUtils, transactionsByEmployeeUtils, paginateTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      paginatedTransactionsUtils.invalidateData()\n      \n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  \n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return \n            }\n            // Bug 6 Part 1 is fixed Here by using useState React Hook\n              if(newValue!==EMPTY_EMPLOYEE){\n                setButtonVisibility(false)\n              }else if(newValue === EMPTY_EMPLOYEE){\n                setButtonVisibility(false)\n              }\n            if (newValue.id === ''){\n              return EMPTY_EMPLOYEE\n            }\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n \n        <div className=\"RampBreak--l\" />\n       \n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          {\n          transactions !== null && (\n           //Bug 5 is Fixed here Just call paginateTransactions\n           // Bug 6 Part 2 is Fixed here using [disable,setDisable ==> useState(This is a react hook)] if the list was ended\n            <button\n              className=\"RampButton\"\n             \n              disabled={paginatedTransactionsUtils.loading || disable}\n              onClick={async () => {\n                \n                try{await paginateTransactions()}catch(error){console.log(error); setDisable(true)}\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}